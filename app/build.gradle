plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs'
}

apply from: '../dependencies.gradle'

// Try reading secrets from file
def secretsPropertiesFile = rootProject.file("secrets.properties")
def secretProperties = new Properties()

if (secretsPropertiesFile.exists()) {
    secretProperties.load(new FileInputStream(secretsPropertiesFile))
} else { // Otherwise read from environment variables, this happens in CI
    secretProperties.setProperty("cuverie_api_url", System.getenv('cuverie_api_url'))
    secretProperties.setProperty("cuverie_auth_url", System.getenv('cuverie_auth_url'))
    secretProperties.setProperty("cuverie_client_id", System.getenv('cuverie_client_id'))
    secretProperties.setProperty("cuverie_client_secret", System.getenv('cuverie_client_secret'))
    secretProperties.setProperty("signing_keystore_password", System.getenv('signing_keystore_password'))
    secretProperties.setProperty("signing_key_password", System.getenv('signing_key_password'))
    secretProperties.setProperty("signing_key_alias", System.getenv('signing_key_alias'))
    secretProperties.setProperty("VERSION_CODE", System.getenv('VERSION_CODE'))
    secretProperties.setProperty("VERSION_NAME", System.getenv('VERSION_SHA'))
    secretProperties.setProperty("keystore_path", System.getenv('keystore_path'))
}
android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId "com.example.dummybase"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk

        versionCode Integer.valueOf(secretProperties['VERSION_CODE'] ?: versions.versionCode)
        versionName(/*secretProperties['VERSION_NAME'] ?: */versions.versionName)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Custom properties
        buildConfigField("String", "CUVERIE_API_URL", "\"${secretProperties['cuverie_api_url']}\"")
        buildConfigField("String", "CUVERIE_AUTH_URL", "\"${secretProperties['cuverie_auth_url']}\"")
        buildConfigField("String", "CUVERIE_CLIENT_ID", "\"${secretProperties['cuverie_client_id']}\"")
        buildConfigField("String", "CUVERIE_CLIENT_SECRET", "\"${secretProperties['cuverie_client_secret']}\"")
    }

    signingConfigs {
        release {
            storeFile file(secretProperties['keystore_path']) // Generated by the gitlab CI script from a base64 string
            storePassword secretProperties['signing_keystore_password']
            keyAlias secretProperties['signing_key_alias']
            keyPassword secretProperties['signing_key_password']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        dataBinding = true
        viewBinding true
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
}

dependencies {

    // Background icons and color on swiper cards
    implementation "com.github.xabaras:RecyclerViewSwipeDecorator:1.3"

    // Android supports
    implementation "com.google.android.material:material:$versions.materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintVersion"

    // Architecture components
    implementation "androidx.fragment:fragment-ktx:$versions.fragmentVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$versions.newLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.newLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$versions.lifecycleVersion"

    // View components
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$versions.refreshVersion"

    // Database
    implementation "androidx.room:room-runtime:$versions.roomVersion"
    implementation "com.google.android.play:core-ktx:$versions.playCore"
    kapt "androidx.room:room-compiler:$versions.roomVersion"


    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutinesVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$versions.reflectVersion"

    // Startup
    implementation "androidx.startup:startup-runtime:$versions.startupVersion"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.navVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.navVersion"

    // Dagger
    implementation "com.google.dagger:dagger:$versions.daggerVersion"
    implementation "com.google.dagger:hilt-android:$versions.daggerHiltAndroidVersion"
    implementation "com.google.dagger:hilt-android-testing:$versions.daggerHiltAndroidVersion"
    implementation "androidx.hilt:hilt-common:$versions.daggerHiltVersion"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    kapt "com.google.dagger:hilt-android-compiler:$versions.daggerHiltAndroidVersion"
    kapt "androidx.hilt:hilt-compiler:$versions.daggerHiltVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$versions.daggerHiltAndroidVersion"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$versions.daggerHiltAndroidVersion"
    implementation "javax.annotation:javax.annotation-api:$versions.annotation"

    // Network
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$versions.retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttpVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$versions.okhttpVersion"
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'

    // Moshi
    implementation "com.squareup.moshi:moshi-kotlin:$versions.moshiVersion"
    implementation "com.squareup.moshi:moshi-kotlin-codegen:$versions.moshiVersion"

    // Glide
    implementation "com.github.bumptech.glide:glide:$versions.glideVersion"
    kapt "com.github.bumptech.glide:compiler:$versions.glideVersion"

    // Worker
    implementation "androidx.work:work-runtime-ktx:$versions.workerVersion"

    // Debugging
    implementation "com.jakewharton.timber:timber:$versions.timberVersion"

    // Testing
    androidTestImplementation "androidx.test.ext:junit:$versions.androidxTestJunit"

    debugImplementation 'com.facebook.flipper:flipper:0.120.0'
    debugImplementation 'com.facebook.soloader:soloader:0.10.1'
    debugImplementation 'com.facebook.flipper:flipper-network-plugin:0.120.0'
    debugImplementation 'com.facebook.flipper:flipper-retrofit2-protobuf-plugin:0.91.2'

    releaseImplementation 'com.facebook.flipper:flipper-noop:0.120.0'
}